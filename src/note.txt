apiSlice
태그와 연결된 쿼리

deletePost / updatePost => fetchPostById

1.deletePost ,updatePost에서 **invalidatesTags**로 태그 무효화를 설정.
2.동일한 태그를 제공(providesTags)하는 fetchPostById가 자동으로 다시 리패칭됨.
3.RTK Query는 태그 기반으로 '쿼리와 변이'를 연결하여 
(builder.query : builder.mutation)
최신 상태 유지를 자동화합니다.


{
  "api": {
    "queries": {
      "getPosts(undefined)": {
        "status": "fulfilled", // 현재 상태: "pending", "fulfilled", "rejected" 등
        "data": {
          "ids": ["1", "2", "3"], // API에서 받은 데이터의 ID 배열
          "entities": { // 각 ID에 해당하는 데이터
            "1": {
              "id": "1",
              "title": "Post 1",
              "content": "Content of post 1",
              "date": "2024-11-22T10:00:00.000Z",
              "reactions": {
                "thumbsUp": 2,
                "wow": 0,
                "heart": 1,
                "rocket": 0,
                "coffee": 0
              }
            },
            "2": {
              "id": "2",
              "title": "Post 2",
              "content": "Content of post 2",
              "date": "2024-11-22T10:01:00.000Z",
              "reactions": {
                "thumbsUp": 0,
                "wow": 3,
                "heart": 0,
                "rocket": 2,
                "coffee": 1
              }
            }
          }
        }
      },
      "getPostsByUserId({id: 1})": {
        "status": "fulfilled",
        "data": {
          "ids": ["2"], // 특정 유저에 해당하는 게시물의 ID
          "entities": {
            "2": {
              "id": "2",
              "title": "Post 2",
              "content": "Content of post 2",
              "date": "2024-11-22T10:01:00.000Z",
              "reactions": {
                "thumbsUp": 0,
                "wow": 3,
                "heart": 0,
                "rocket": 2,
                "coffee": 1
              }
            }
          }
        }
      }
    },
    "mutations": {
      "addNewPost": {
        "status": "pending" // 새로운 게시물 추가 상태
      },
      "updatePost": {
        "status": "fulfilled" // 게시물 업데이트 성공
      },
      "deletePost": {
        "status": "rejected", // 게시물 삭제 실패
        "error": "Network error"
      }
    },
    "provided": {
      "Post": {
        "LIST": {
          "data": [
            "1",
            "2",
            "3"
          ] // 전체 게시물 ID 목록 캐싱
        },
        "1": {
          "data": {
            "id": "1",
            "title": "Post 1"
          }
        },
        "2": {
          "data": {
            "id": "2",
            "title": "Post 2"
          }
        }
      }
    }
  }
}


-----------------------------------------------------------------------------
태그 제공 (providesTags)

providesTags: (result) => [
    { type: 'Post', id: "LIST" }, 
    ...result.ids.map(id => ({ type: 'Post', id }))
]

태그 무효화 (invalidatesTags)

invalidatesTags: [
    { type: 'Post', id: "LIST" }, // 전체 리스트 무효화 -> 리패칭
    { type: 'Post', id: 1 }       // ID 1의 게시물만 무효화
]

-----------------------------------------------------------------------------

컨포넌트 구조 


App (최상위 부모 컴포넌트)
├── Layout (중간 부모 컴포넌트)
│   ├── Header (공통 자식 컴포넌트)
│   └── Outlet (중첩된 라우트 렌더링)
│       ├── PostsList ("/" 경로)
│       ├── AddPostForm ("/post" 경로)
│       ├── SinglePostPage ("/post/:postId" 경로)
│       ├── EditPostForm ("/post/edit/:postId" 경로)
│       ├── UsersList ("/user" 경로)
│       └── UserPage ("/user/:userId" 경로)
└── Navigate (Catch-all route for undefined paths)



------------------------------------------------------------------------

getPosts와 getPostsByUserId는 서로 다른 캐쉬 데이터를 관리


태그 이름이 같아야 무효화 가능
providesTags { type: 'Post', id: "LIST" } <--> invalidatesTags { type: 'Post', id: "LIST" }

getPosts, getPostsByUserId... : 쿼리 함수이름


-------------------------------------------------------------------
unwrap() ??

 await addNewPost({ title, body: content, userId }).unwrap();

 addNewPost는 기본적으로 Promise를 반환하며, 
 이 Promise는 항상 아래와 같은 객체 구조를 포함

{
  data: { ... },  // 요청 성공 시 반환된 데이터
  error: { ... }, // 요청 실패 시 에러 객체
  meta: { ... }   // 기타 메타데이터
}

unwrap() 이 없을때 : 코드가 복잡해짐..
const onSavePostClicked = async () => {
    if (canSave) {
        try {
            const result = await addNewPost({ title, body: content, userId });
            
            if (result.error) {
                throw result.error; // 실패 시 수동으로 에러를 던짐
            }

            console.log('Post saved:', result.data); // 성공 시 데이터 출력
            setTitle('');
            setContent('');
            setUserId('');
            navigate('/');
        } catch (err) {
            console.error('Failed to save the post:', err); // 에러 처리
        }
    }
};

result.error와 result.data를 수동으로 확인해야 함.
실패 시 throw를 수동으로 작성해야 하므로 코드가 장황해짐.



-------------------------------------------------------------------

오버 라이딩
기존 객체(reactions)를 복사하고, 특정 키-값 쌍만 동적 업데이트


const post = {
    reactions: { like: 2, love: 3, haha: 1 }
};

const name = 'like';
const newValue = post.reactions[name] + 1;

const updatedReactions = { 
    ...post.reactions, 
    [name]: newValue 
};

updatedReactions
// { like: 3, love: 3, haha: 1 }


----------------------------------------------------------------------------------

{ type: 'User', id: "SUCK" } 

// 전체 데이터 리패칭
1. store.dispatch(usersApiSlice.util.invalidateTags([{ type: 'User', id: "SUCK" }])); ->
2. providesTags: (result, error, arg) => [
                { type: 'User', id: "SUCK" },
            ]

// 개별적으로 데이터 리패칭 -> 비효율적
  1.store.dispatch(usersApiSlice.util.invalidateTags([
      { type: 'User', id: "1" },
      { type: 'User', id: "2" },
      { type: 'User', id: "3" }
  ]));


  2.  providesTags: (result, error, arg) => [
   ...result.ids.map(id => ({ type: 'User', id }))
            ]


// invalidateTags -> providesTags : Network탭 Request URL 로 확인 가능!!















